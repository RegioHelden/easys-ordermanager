# This folder is cached between builds
# http://docs.gitlab.com/ee/ci/yaml/README.html#cache
cache:
  paths:
    - ~/.cache/pip/

test:
  stage: test
  image: "python:$PYTHON"
  before_script:
    - python -V  # Print out python version for debugging
    - pip install -r requirements-test.txt
    - pip install "django$DJANGO"
    - pip install "djangorestframework$DRF"
  parallel:
    matrix:
      - DJANGO: ">=3.2,<4.0"
        PYTHON:
          - "3.8"
          - "3.9"
          - "3.10"
        DRF:
          - ">=3.11,<3.12"
          - ">=3.12,<3.13"
      - DJANGO: ">=4.0,<4.1"
        PYTHON:
          - "3.8"
          - "3.9"
          - "3.10"
        DRF:
          - ">=3.13,<3.14"
      - DJANGO: ">=4.1,<4.2"
        PYTHON:
          - "3.8"
          - "3.9"
          - "3.10"
        DRF:
          - ">=3.13,<3.14"
  script:
    - coverage run --source=easys_ordermanager manage.py test
    - flake8 easys_ordermanager

tag_release:
  stage: deploy
  image: python:latest
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      exists:
        - "setup.cfg"
  script:
    - git diff --quiet -G"current_version = [0-9.]+" $CI_MERGE_REQUEST_DIFF_BASE_SHA..HEAD setup.cfg || export NEW_RELEASE=1
    - PKG_VERSION=$(python setup.py --version)
    - LATEST_TAG=$(git tag|sort -V|tail -1)
    - echo "Latest tag '${LATEST_TAG}', package version '${PKG_VERSION}', release required => ${NEW_RELEASE}"
    - >-
      if [ "$NEW_RELEASE" -eq "1" ] && [ "$PKG_VERSION" != "$LATEST_TAG" ]; then
        git config user.email "${GITLAB_USER_EMAIL}"
        git config user.name "${GITLAB_USER_NAME}"
        git remote add tag-origin "${CI_SERVER_PROTOCOL}://oauth2:${PROJECT_ACCESS_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
        git tag -a "v${PKG_VERSION}" -m "Version created by GitLab CI build"
        git push tag-origin "v${PKG_VERSION}"
      fi

publish:
  stage: deploy
  # job only runs for version (release) tags
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+.\d+.\d+/'
  image: python:latest
  script:
    - pip install -U twine build
    - python -m build
    - twine upload dist/*
  environment: pypi
